using System;

namespace Example2
{
    /*
     Создать класс для описания человека. Характеристики:
        Фамилия, Имя
        Дата рождения
        Пол (мужской/женский) - использовать перечисление

    В класс добавить методы для:
        Получения и записи основных характеристик (использовать свойства)
        Печати имени и фамилии на консоль
        Расчет возраста на текущую дату или указанную дату. Для женщин преуменьшать возраст на 10% от настоящего

    Добавить в класс конструкторы:
        Без параметров - инициализировать дату рождения сегодняшним числом
        С параметрами: Фамилия, Имя, Дата рождения, Пол
     */

    // перечисление для выбора пола
    enum Sex
    {
        Male, // мужской
        Female // женский
    }

    // класс человек
    class Human
    {
        #region Основные характеристики человека
        // поле для хранения фамилии
        // т.к. поле private то оно доступно только внутри класса
        // обратите внимание что Вижуал студио предлагает избавиться от этого поля и заменить на auto свойство
        // попробуйте сделать это нажав Alt + Enter и далее "Использовать свойство auto"
        private string lastName;

        // объявление свойства для хранения фамилии
        // свойство public поэтому к нему есть доступ "извне"
        // в таком виде лучше свойства не использовать, для этого есть auto свойства
        public string LastName
        {
            // метод get или так называемый геттер будет вызван когда кто-то захочет считать значение свойства LastName
            get { return lastName; } 
            // метод set или так называемый сеттер будет вызван когда кто-то захочет записать значение свойства LastName
            // в переменной value хранится значение которое будет записано
            set { lastName = value; }
        }

        // пример auto свойства
        // компилятор C# сам сгенерирует private поле и методы для доступа к нему
        public string FirstName { get; set; }

        // поле для хранения даты рождения
        private DateTime birthDate;

        // свойство дата рождения
        public DateTime BirthDate
        {
            // получение поля объекта
            get
            {
                // просто возвращаем значение поля
                // в принципе здесь может быть любой код
                // но не рекомендуется писать много кода в геттерах и сеттерах
                // это может привести к сложноотлавливаемым багам
                return birthDate;
            }

            // запись значения объекта
            set
            {
                // в переменной value хранится то значение которое было присвоено свойству
                // здесь мы хотим проверить что дата не будет в будущем
                // если же дата в будущем, то мы сообщаем посредством исключения что такое недопустимо для класса
                if (value > DateTime.Now) throw new ArgumentException();

                // value значение которое будет установлено в поле
                birthDate = value;
            }
        }

        // еще одно auto свойство для хранения Пола
        public Sex Sex { get; set; }
        #endregion

        #region Конструкторы вызываются во время создания объекта (оператор new)
        // конструктор по умолчанию или конструктор без параметров
        public Human()
        {
            // присваивываем значение по умолчанию дате рождения
            birthDate = DateTime.Now;
        }

        /// <summary>
        /// Конструктор с параметрами
        /// Компилятор автоматически выберет перегрузку конструкторов в зависимости от количества параметров
        /// </summary>
        /// <param name="firstName">Имя</param>
        /// <param name="lastName">Фамилия</param>
        /// <param name="birth">ДР</param>
        /// <param name="sex">Пол</param>
        public Human(string firstName, string lastName, DateTime birth, Sex sex)
        {
            // записываем значение параметров конструктора в свойства и поля класса
            FirstName = firstName;
            LastName = lastName;
            birthDate = birth;
            Sex = sex;
        }
        #endregion

        #region Поведение человека (по сути это методы которые можем вызвать для этого класса)
        // печать фамилии и имени на консоль
        public void PrintName()
        {
            Console.WriteLine($"{FirstName} {LastName}");
        }

        // расчет возраста
        public int GetAge()
        {
            // сегодняшняя дата
            var today = DateTime.Today;
            // считаем разницу в годах
            var age = today.Year - birthDate.Year;
            // если дата рождения больше сегодняшнего дня, то уменьшаем возраст на 1, чтобы получить количество полных лет
            if (birthDate.Date > today.AddYears(-age)) age--;

            // в зависимости от пола возращаем возраст
            return Sex == Sex.Male
                ? age
                : (int)(age * 0.9);
        }
        #endregion
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Создаем объект human с использованием конструктора по умолчанию
            Human human = new Human();
            // проверям что по умолчанию дата рождения это текущая дата
            Console.WriteLine(human.BirthDate);
            // Фамилия
            human.LastName = "Einstein";
            // Имя
            human.FirstName = "Albert";
            // следующая строчка не будет работать, ошибка компиляции. Попытка записать в private поле
            //human.birthDate = new DateTime(1900, 1, 1);
            
            // запись даты рождения
            human.BirthDate = new DateTime(1920, 12, 12);
            // следующая строка вызовет исключение, т.к. нельзя присвоить будущую дату рождения
            //human.birthDate = new DateTime(2020, 12, 12);
            // женский пол
            human.Sex = Sex.Female;

            // печать имени на консоль
            human.PrintName();
            // печать возраста
            Console.WriteLine($"Age is {human.GetAge()}");

            // создаем еще один объект класса Человек(Human)
            // в этот раз используем конструктор с параметрами
            Human human1 = new Human("Ivan", "Ivanov", new DateTime(1990, 10, 10), Sex.Male);
            // печать имени
            human1.PrintName();
            // печать возраста
            Console.WriteLine($"Age is {human1.GetAge()}");
        }
    }
}
